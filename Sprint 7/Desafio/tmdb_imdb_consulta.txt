import json
import pandas as pd
import boto3
from tmdbv3api import TMDb, TV, Find
from io import StringIO
import datetime

# Configuração básica com a chave de API
tmdb = TMDb()
tmdb.api_key = '1af2f2525262ee4cd8d7926245f782bd'

# Função para buscar detalhes de uma série de TV por IMDb ID usando a API do TMDb
def get_tv_details(imdb_id):
    find = Find()
    search = find.find(external_id=imdb_id, external_source='imdb_id')
    if search and search.get('tv_results'):
        tmdb_id = search['tv_results'][0]['id']
        tv = TV()
        details = tv.details(tmdb_id)
        return {
            'Title': details.name,
            'Overview': details.overview,
            'First_Air_Date': details.first_air_date,
            'Popularity': details.popularity,
            'Vote_Average': details.vote_average,
            'Vote_Count': details.vote_count,
        }
    return None

# Função para ler um arquivo CSV do S3 e retornar um DataFrame
def read_csv_from_s3(s3, bucket_name, key):
    obj = s3.get_object(Bucket=bucket_name, Key=key)
    df = pd.read_csv(StringIO(obj['Body'].read().decode('utf-8')), sep='|', dtype={'id': str}, low_memory=False)
    print(f"Arquivo CSV lido com sucesso. Total de registros: {len(df)}")
    return df

# Função para filtrar séries de drama e retornar IDs únicos, ordenados pelo número de votos
def filter_and_sort_drama_series(df):
    df_drama = df[df['genero'] == 'Drama'].drop_duplicates(subset=['id'])
    return df_drama.sort_values(by='numeroVotos', ascending=False)['id'].unique()

# Função para salvar os dados fornecidos em um arquivo JSON no S3
def save_to_s3(s3, bucket_name, key, data):
    s3.put_object(Bucket=bucket_name, Key=key, Body=json.dumps(data, indent=4, ensure_ascii=False))
    print(f"Arquivo JSON salvo em: s3://{bucket_name}/{key}")

# Função principal da Lambda
def lambda_handler(event, context):
    s3 = boto3.client('s3')
    bucket_name = 'data-lake-do-allan'
    csv_key = 'Raw/Local/CSV/Series/2024/06/17/series.csv'

    # Ler e processar o arquivo CSV
    df_series = read_csv_from_s3(s3, bucket_name, csv_key)
    drama_series_ids = filter_and_sort_drama_series(df_series)
    
    # Buscar detalhes no TMDb
    series_info_tmdb = []
    processed_ids = set()
    for imdb_id in drama_series_ids:
        if len(series_info_tmdb) >= 50:
            break
        if imdb_id in processed_ids:
            continue
        details = get_tv_details(imdb_id)
        if details:
            series_info_tmdb.append(details)
            processed_ids.add(imdb_id)
            print(f"Detalhes obtidos para IMDb ID {imdb_id}: {details}")
        else:
            print(f"Detalhes não encontrados para IMDb ID {imdb_id}")
    
    # Salvar resultados no S3
    current_date = datetime.datetime.now().strftime("%Y/%m/%d")
    json_key = f"Raw/TMDB/JSON/{current_date}/series_imdb_tmdb.json"
    save_to_s3(s3, bucket_name, json_key, series_info_tmdb)

    return {
        'statusCode': 200,
        'body': json.dumps(f'Processamento concluído. Total de séries processadas: {len(series_info_tmdb)}')
    }
