import json
import boto3
import requests
from datetime import datetime

# Configuração básica a chave de API do TMDB
tmdb_api_key = '1af2f2525262ee4cd8d7926245f782bd'

def lambda_handler(event, context):
    # URL da API do TMDB para buscar filmes de Drama e Romance
    url = "https://api.themoviedb.org/3/discover/movie"
    
    # Parâmetros da requisição GET
    params = {
        'api_key': tmdb_api_key,
        'include_adult': False,
        'include_video': False,
        'language': 'en-US',
        'sort_by': 'vote_average.desc',
        'with_genres': '18,10749',  # Drama e Romance
        'vote_count.gte': 200,  # Pelo menos 200 votos
        'page': 1
    }
    
    # Fazendo a requisição GET para a API do TMDB usando requests
    response = requests.get(url, params=params)
    response.raise_for_status()  # Lança exceção se a requisição falhar
    
    # Convertendo a resposta JSON em um dicionário Python
    response_data = response.json()
    top_movies = response_data.get('results', [])[:20]  # Limitando a 20 filmes
    
    top_movies_info = []
    for movie in top_movies:
        # URL para buscar os créditos do filme específico
        credits_url = f"https://api.themoviedb.org/3/movie/{movie['id']}/credits"
        credits_params = {
            'api_key': tmdb_api_key,
            'language': 'en-US'
        }
        credits_response = requests.get(credits_url, params=credits_params)
        credits_response.raise_for_status()  # Lança exceção se a requisição falhar
        
        # Convertendo a resposta JSON dos créditos em um dicionário Python
        credits_data = credits_response.json()
        
        # Filtrando os diretores do filme
        directors = [
            {'Name': crew_member['name']}
            for crew_member in credits_data.get('crew', [])
            if crew_member['job'] == 'Director'
        ]
        
        # Construindo o dicionário de informações do filme
        movie_info = {
            'Title': movie['title'],
            'Vote_Average': movie['vote_average'],
            'Directors': directors
        }
        top_movies_info.append(movie_info)
    
    # Timestamp atual para o path de data
    current_date = datetime.now().strftime("%Y/%m/%d")
    
    # Nome do arquivo de saída com o padrão de path especificado
    output_filename = f"Raw/TMDB/JSON/{current_date}/directors_drama_romance_movies.json"
    
    # Salvar informações dos filmes em um arquivo JSON no S3
    s3_client = boto3.client('s3')
    s3_client.put_object(Bucket='data-lake-do-allan', Key=output_filename, Body=json.dumps(top_movies_info, indent=4, ensure_ascii=False))
    print(f"Arquivo JSON salvo em: s3://data-lake-do-allan/{output_filename}")
    
    return {
        'statusCode': 200,
        'body': json.dumps(f'Processamento concluído. Total de filmes processados: {len(top_movies_info)}')
    }
